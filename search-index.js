var searchIndex = {};
searchIndex["i2c"] = {"doc":"Generic traits encompassing operations on an I2C bus.","items":[[3,"SmbusReadWrite","i2c","A wrapper around an `i2c::ReadWrite` that attempts to impl `Smbus`.",null,null],[12,"0","","",0,null],[3,"ReadFlags","","Flags to work around device quirks.",null,null],[3,"WriteFlags","","Flags to work around device quirks.",null,null],[4,"Message","","Part of a combined I2C transaction.",null,null],[13,"Read","","I2C read command",1,null],[12,"address","i2c::Message","The slave address of the device to read from.",1,null],[12,"data","","A data buffer to read into.",1,null],[12,"flags","","Additional flags can modify the operation to work around device quirks.",1,null],[13,"Write","i2c","I2C write command",1,null],[12,"address","i2c::Message","The slave address of the device to write to.",1,null],[12,"data","","The data to write.",1,null],[12,"flags","","Additional flags can modify the operation to work around device quirks.",1,null],[11,"set_slave_address","i2c","",0,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"bool"}],"output":{"name":"result"}}],[11,"i2c_read","","",0,null],[11,"i2c_write","","",0,null],[11,"smbus_write_quick","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"smbus_read_byte","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"smbus_write_byte","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"smbus_read_byte_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"result"}}],[11,"smbus_write_byte_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[11,"smbus_read_word_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u16"],"name":"result"}}],[11,"smbus_write_word_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"name":"result"}}],[11,"smbus_process_call","","",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"generics":["u16"],"name":"result"}}],[11,"smbus_read_block_data","","",0,null],[11,"smbus_write_block_data","","",0,null],[11,"i2c_read_block_data","","",0,null],[11,"i2c_write_block_data","","",0,null],[11,"smbus_process_call_block","","",0,null],[8,"Master","","Indicates an ability to communicate with the I2C protocol.",null,null],[16,"Error","","The error type returned by I2C operations.",2,null],[8,"Address","","An I2C master can address different slaves on an I2C bus.",null,null],[10,"set_slave_address","","Sets the current slave to address.",3,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"bool"}],"output":{"name":"result"}}],[8,"ReadWrite","","An I2C master that can communicate using the standard Read/Write traits.",null,null],[10,"i2c_read","","Initiate an isolated read transfer on the I2C bus, followed by a STOP.",4,null],[10,"i2c_write","","Initiate an isolated write transfer on the I2C bus, followed by a STOP.",4,null],[8,"Smbus","","SMBus operations",null,null],[10,"smbus_write_quick","","Sends a single bit to the device, in the place of the rd/wr address bit.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"smbus_read_byte","","Reads a single byte from a device without specifying a register.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"smbus_write_byte","","Sends a single byte to the device",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"smbus_read_byte_data","","Reads a byte from the designated register.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"result"}}],[10,"smbus_write_byte_data","","Writes a byte to the designated register.",5,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[10,"smbus_read_word_data","","Reads a 16-bit word from the designated register.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u16"],"name":"result"}}],[10,"smbus_write_word_data","","Writes a 16-bit word to the designated register.",5,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"name":"result"}}],[10,"smbus_process_call","","Writes a 16-bit word to the specified register, then reads a 16-bit word in response.",5,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"generics":["u16"],"name":"result"}}],[10,"smbus_read_block_data","","Reads up to 32 bytes from the designated device register.",5,null],[10,"smbus_write_block_data","","Writes up to 32 bytes to the designated device register.",5,null],[8,"Smbus20","","SMBus 2.0 operations",null,null],[10,"smbus_process_call_block","","Sends up to 31 bytes of data to the designated register, and reads up to 31 bytes in return.",6,null],[8,"SmbusPec","","SMBus Packet Error Checking",null,null],[10,"smbus_set_pec","","Enables or disables SMBus Packet Error Checking",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[8,"BlockTransfer","","Basic I2C transfer without including length prefixes associated with SMBus.",null,null],[10,"i2c_read_block_data","","Reads a block of bytes from the designated device register.",8,null],[10,"i2c_write_block_data","","Writes a block of bytes to the designated device register.",8,null],[8,"BulkTransfer","","Advanced I2C transfer queues that support repeated START operations.",null,null],[10,"i2c_transfer_support","","Specifies the flags that this implementation supports.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"i2c_transfer","","Executes a queue of I2C transfers, separated by repeated START conditions. Data buffers are truncated to the actual read length on completion.",9,null],[11,"len","","Byte length of the message data buffer.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"address","","Address of the message's slave.",1,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"data","","The data buffer of the message.",1,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"readflags"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"readflags"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"RECEIVE_LEN","","The first received byte will indicate the remaining length of the transfer.",10,null],[18,"NACK","","NACK bit is generated for this read.",10,null],[18,"REVERSE_RW","","Flips the meaning of the read/write address bit for misbehaving devices.",10,null],[18,"NO_START","","Do not generate a START condition or the address start byte. When used for the first message, a START condition is still generated.",10,null],[18,"STOP","","Force a STOP condition after this message.",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"readflags"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"readflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"u16"}],"output":{"generics":["readflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"u16"}],"output":{"name":"readflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,{"inputs":[{"name":"self"},{"name":"readflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"bitor_assign","","Adds the set of flags.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":{"name":"readflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",10,{"inputs":[{"name":"self"},{"name":"readflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"readflags"}}],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"readflags"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"writeflags"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"writeflags"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IGNORE_NACK","","Treat NACK as an ACK and prevent it from interrupting the transfer.",11,null],[18,"REVERSE_RW","","Flips the meaning of the read/write address bit for misbehaving devices.",11,null],[18,"NO_START","","Do not generate a START condition or the address start byte. When used for the first message, a START condition is still generated.",11,null],[18,"STOP","","Force a STOP condition after this message.",11,null],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"writeflags"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"writeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"u16"}],"output":{"generics":["writeflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"inputs":[{"name":"u16"}],"output":{"name":"writeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",11,{"inputs":[{"name":"self"},{"name":"writeflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"bitor_assign","","Adds the set of flags.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":{"name":"writeflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",11,{"inputs":[{"name":"self"},{"name":"writeflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"writeflags"}}],[11,"extend","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"writeflags"}}]],"paths":[[3,"SmbusReadWrite"],[4,"Message"],[8,"Master"],[8,"Address"],[8,"ReadWrite"],[8,"Smbus"],[8,"Smbus20"],[8,"SmbusPec"],[8,"BlockTransfer"],[8,"BulkTransfer"],[3,"ReadFlags"],[3,"WriteFlags"]]};
searchIndex["i2c_i2cdev"] = {"doc":"Implements the `i2c::*` traits for the `i2cdev` crate.","items":[[3,"I2cDev","i2c_i2cdev","A wrapper around an `I2CDevice` type that impls the i2c traits.",null,null],[12,"0","","",0,null],[11,"set_slave_address","","",0,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"bool"}],"output":{"name":"result"}}],[11,"i2c_read","","",0,null],[11,"i2c_write","","",0,null],[11,"smbus_write_quick","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"smbus_read_byte","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"smbus_write_byte","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"smbus_read_byte_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u8"],"name":"result"}}],[11,"smbus_write_byte_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"result"}}],[11,"smbus_read_word_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["u16"],"name":"result"}}],[11,"smbus_write_word_data","","",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"name":"result"}}],[11,"smbus_process_call","","",0,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u16"}],"output":{"generics":["u16"],"name":"result"}}],[11,"smbus_read_block_data","","",0,null],[11,"smbus_write_block_data","","",0,null],[11,"i2c_read_block_data","","",0,null],[11,"i2c_write_block_data","","",0,null],[11,"smbus_process_call_block","","",0,null]],"paths":[[3,"I2cDev"]]};
initSearch(searchIndex);
